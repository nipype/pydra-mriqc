# name of the converted workflow constructor function
name: init_anat_report_wf
# name of the nipype workflow constructor
nipype_name: init_anat_report_wf
# name of the nipype module the function is found within, e.g. mriqc.workflows.anatomical.base
nipype_module: mriqc.workflows.anatomical.output
# Name of the node that is to be considered the input of the workflow, i.e. its outputs will be the inputs of the workflow
input_node: inputnode
outputs:
  zoom_report:
    node_name: ds_report_zoomed
    field: in_file
  bg_report:
    node_name: ds_report_background
    field: in_file
  segm_report:
    node_name: ds_report_segm
    field: in_file
  bmask_report:
    node_name: ds_report_bmask
    field: in_file
  artmask_report:
    node_name: ds_report_artmask
    field: in_file
  airmask_report:
    node_name: ds_report_airmask
    field: in_file
  headmask_report:
    node_name: ds_report_headmask
    field: in_file
  norm_report:
    node_name: ds_report_norm
    field: in_file
  noise_report:
    node_name: ds_report_noisefit
    field: in_file
# Generic regular expression substitutions to be run over the code before it is processed
find_replace:
  - ["config = NipypeConfig\\(\\)", ""]
  - ["iflogger = logging.getLogger\\(\"nipype.interface\"\\)", ""]
  - ["logging = Logging\\(config\\)", ""]
# name of the workflow variable that is returned
workflow_variable: workflow
# the names of the nested workflows that are defined in other modules and need to be imported
external_nested_workflows:
