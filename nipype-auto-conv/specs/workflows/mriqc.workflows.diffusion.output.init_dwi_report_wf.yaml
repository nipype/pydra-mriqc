# name of the converted workflow constructor function
name: init_dwi_report_wf
# name of the nipype workflow constructor
nipype_name: init_dwi_report_wf
# name of the nipype module the function is found within, e.g. mriqc.workflows.anatomical.base
nipype_module: mriqc.workflows.diffusion.output
# Name of the node that is to be considered the input of the workflow, i.e. its outputs will be the inputs of the workflow
input_node: inputnode
# Name of the node that is to be considered the output of the workflow, i.e. its inputs will be the outputs of the workflow
outputs:
  snr_report:
    node_name: mosaic_snr
    field: out_report
  noise_report:
    node_name: mosaic_noise
    field: out_file
  fa_report:
    node_name: mosaic_fa
    field: out_file
  md_report:
    node_name: mosaic_md
    field: out_file
  heatmap_report:
    node_name: plot_heatmap
    field: out_file
  spikes_report:
    node_name: mosaic_spikes
    field: out_file
  norm_report:
    node_name: inputnode
    field: mni_report
  carpet_report:
    node_name: bigplot
    field: out_file
  # bg_report:  # seems to be the same as the noise report
  #   node_name: mosaic_noise
  #   field: out_file
  bmask_report:
    node_name: plot_bmask
    field: out_file
# Generic regular expression substitutions to be run over the code before it is processed
find_replace:
  - ["config = NipypeConfig\\(\\)", ""]
  - ["iflogger = logging.getLogger\\(\"nipype.interface\"\\)", ""]
  - ["logging = Logging\\(config\\)", ""]
  - ["out_file=workflow\\.lzin\\.epi_mean,\\n", ""] # multiple connections to out_file in workflow
# name of the workflow variable that is returned
workflow_variable: workflow
# the names of the nested workflows that are defined in other modules and need to be imported
external_nested_workflows: null
